package org.little.stream.mq;

import com.ibm.mq.constants.MQConstants;

//import prj0.util.Logger;

public class def{
       final private static String CLASS_NAME="prj0.stream.mq.def";
       final private static int    CLASS_ID  =1701;
	          public  static String getClassName(){return CLASS_NAME;}
             public  static int    getClassId(){return CLASS_ID;}
             //private static Logger log=new Logger(CLASS_NAME);

             public static final int INIT_MSG_SIZE   = 4*1024*1024;
             public static final int MAX_MSG_SIZE    = 1024*1024*100;
             public static final int DEFAULT_TIMEOUT = 100;
             public static final int QMODE_READ      = 1;
             public static final int QMODE_WRITE     = 2;
             public static final int QMODE_READ_EX   = 4;
             public static final int QMODE_BROWSE    = 8;
             public static final int QMODE_TRUNC     = 16;                          
                                                                                    
             public static final int QOPEN_READ      = //MQConstants.MQOO_INPUT_SHARED|
                                                       MQConstants.MQOO_INPUT_AS_Q_DEF|
                                                      //|MQConstants.MQOO_FAIL_IF_QUIESCING
                                                      0;

             public static final int QOPEN_READ_EX   = MQConstants.MQOO_INPUT_EXCLUSIVE|     //4
                                                       //MQConstants.MQOO_INPUT_AS_Q_DEF|      //1
                                                       //MQConstants.MQOO_FAIL_IF_QUIESCING|
                                                      0;
             public static final int QOPEN_BROWSE    =  MQConstants.MQOO_INPUT_SHARED + MQConstants.MQOO_BROWSE;

                                                        //MQConstants.MQOO_INPUT_SHARED   |      //2
                                                       //MQConstants.MQOO_INPUT_AS_Q_DEF|
                                                       //MQConstants.MQOO_FAIL_IF_QUIESCING|    //8192
                                                       //MQConstants.MQOO_BROWSE|               //8
                                                       //0;
             public static final int QOPEN_TRUNC     = QOPEN_READ;
             public static final int QOPEN_WRITE     = MQConstants.MQOO_OUTPUT;
                                      
             public static final int Q_OPT_R         = 
                                                       MQConstants.MQGMO_FAIL_IF_QUIESCING | 
                                                       MQConstants.MQGMO_COMPLETE_MSG |
                                                       //MQOO_INPUT_AS_Q_DEF |
                                                       //MQConstants.MQGMO_SYNCPOINT |
                                                       //MQConstants.MQGMO_LOGICAL_ORDER |
                                                       //MQConstants.MQGMO_ALL_MSGS_AVAILABLE |
                                                       0;
             public static final int Q_OPT_READ      = Q_OPT_R | MQConstants.MQGMO_SYNCPOINT;

             public static final int Q_OPT_WRITE_SIMPLE= MQConstants.MQPMO_LOGICAL_ORDER ;

             public static final int Q_OPT_WRITE     = MQConstants.MQPMO_LOGICAL_ORDER | MQConstants.MQPMO_SYNCPOINT;

             public static final int Q_OPT_READ_EX   = Q_OPT_READ;
             public static final int Q_OPT_WRITE_EX  = Q_OPT_WRITE;
             public static final int Q_OPT_BROWSE    = Q_OPT_R|MQConstants.MQGMO_NO_SYNCPOINT ;
             public static final int Q_OPT_TRUNC     = Q_OPT_R|MQConstants.MQGMO_ACCEPT_TRUNCATED_MSG|MQConstants.MQGMO_NO_SYNCPOINT;

             public static final int RET_OK          = 0;
             public static final int RET_WARN        = -1;
             public static final int RET_ERROR       = -2;
             public static final int RET_FATAL       = -3;

             static public String getMode(int mode){
                           String buf="";

                           if((QMODE_READ     & mode)!=0)buf+=" QMODE_READ    | ";           
                           if((QMODE_WRITE    & mode)!=0)buf+=" QMODE_WRITE   | ";
                           if((QMODE_READ_EX  & mode)!=0)buf+=" QMODE_READ_EX | ";
                           if((QMODE_BROWSE   & mode)!=0)buf+=" QMODE_BROWSE  | ";

                     return buf;
             }                                                                         
                                                    
             static public String getOpt(int opt){
                           String buf="";
                           if((MQConstants.MQGMO_WAIT                             & opt)!=0)buf+=" MQGMO_WAIT | ";
                           if((MQConstants.MQGMO_NO_WAIT                          & opt)!=0)buf+=" MQGMO_NO_WAIT | ";                
                           if((MQConstants.MQGMO_SET_SIGNAL                       & opt)!=0)buf+=" MQGMO_SET_SIGNAL | ";             
                           if((MQConstants.MQGMO_FAIL_IF_QUIESCING                & opt)!=0)buf+=" MQGMO_FAIL_IF_QUIESCING | ";       
                           if((MQConstants.MQGMO_SYNCPOINT                        & opt)!=0)buf+=" MQGMO_SYNCPOINT | ";              
                           if((MQConstants.MQGMO_SYNCPOINT_IF_PERSISTENT          & opt)!=0)buf+=" MQGMO_SYNCPOINT_IF_PERSISTENT | ";
                           if((MQConstants.MQGMO_NO_SYNCPOINT                     & opt)!=0)buf+=" MQGMO_NO_SYNCPOINT | ";           
                           if((MQConstants.MQGMO_MARK_SKIP_BACKOUT                & opt)!=0)buf+=" MQGMO_MARK_SKIP_BACKOUT | ";      
                           if((MQConstants.MQGMO_BROWSE_FIRST                     & opt)!=0)buf+=" MQGMO_BROWSE_FIRST | ";           
                           if((MQConstants.MQGMO_BROWSE_NEXT                      & opt)!=0)buf+=" MQGMO_BROWSE_NEXT | ";            
                           if((MQConstants.MQGMO_BROWSE_MSG_UNDER_CURSOR          & opt)!=0)buf+=" MQGMO_BROWSE_MSG_UNDER_CURSOR | ";
                           if((MQConstants.MQGMO_MSG_UNDER_CURSOR                 & opt)!=0)buf+=" MQGMO_MSG_UNDER_CURSOR | ";       
                           if((MQConstants.MQGMO_LOCK                             & opt)!=0)buf+=" MQGMO_LOCK | ";                   
                           if((MQConstants.MQGMO_UNLOCK                           & opt)!=0)buf+=" MQGMO_UNLOCK | ";                 
                           if((MQConstants.MQGMO_ACCEPT_TRUNCATED_MSG             & opt)!=0)buf+=" MQGMO_ACCEPT_TRUNCATED_MSG | ";   
                           if((MQConstants.MQGMO_CONVERT                          & opt)!=0)buf+=" MQGMO_CONVERT | ";                
                           if((MQConstants.MQGMO_LOGICAL_ORDER                    & opt)!=0)buf+=" MQGMO_LOGICAL_ORDER | ";          
                           if((MQConstants.MQGMO_COMPLETE_MSG                     & opt)!=0)buf+=" MQGMO_COMPLETE_MSG | ";           
                           if((MQConstants.MQGMO_ALL_MSGS_AVAILABLE               & opt)!=0)buf+=" MQGMO_ALL_MSGS_AVAILABLE | ";     
                           if((MQConstants.MQGMO_ALL_SEGMENTS_AVAILABLE           & opt)!=0)buf+=" MQGMO_ALL_SEGMENTS_AVAILABLE | "; 
                           if((MQConstants.MQGMO_MARK_BROWSE_HANDLE               & opt)!=0)buf+=" MQGMO_MARK_BROWSE_HANDLE | ";     
                           if((MQConstants.MQGMO_MARK_BROWSE_CO_OP                & opt)!=0)buf+=" MQGMO_MARK_BROWSE_CO_OP | ";      
                           if((MQConstants.MQGMO_UNMARK_BROWSE_CO_OP              & opt)!=0)buf+=" MQGMO_UNMARK_BROWSE_CO_OP | ";    
                           if((MQConstants.MQGMO_UNMARK_BROWSE_HANDLE             & opt)!=0)buf+=" MQGMO_UNMARK_BROWSE_HANDLE | ";   
                           if((MQConstants.MQGMO_UNMARKED_BROWSE_MSG              & opt)!=0)buf+=" MQGMO_UNMARKED_BROWSE_MSG | ";    
                           if((MQConstants.MQGMO_PROPERTIES_FORCE_MQRFH2          & opt)!=0)buf+=" MQGMO_PROPERTIES_FORCE_MQRFH2 | ";
                           if((MQConstants.MQGMO_NO_PROPERTIES                    & opt)!=0)buf+=" MQGMO_NO_PROPERTIES | ";          
                           if((MQConstants.MQGMO_PROPERTIES_IN_HANDLE             & opt)!=0)buf+=" MQGMO_PROPERTIES_IN_HANDLE  | ";  
                           if((MQConstants.MQGMO_PROPERTIES_COMPATIBILITY         & opt)!=0)buf+=" MQGMO_PROPERTIES_COMPATIBILITY | ";
                           if((MQConstants.MQGMO_BROWSE_HANDLE                    & opt)!=0)buf+=" MQGMO_BROWSE_HANDLE | ";          
                           if((MQConstants.MQGMO_BROWSE_CO_OP                     & opt)!=0)buf+=" MQGMO_BROWSE_CO_OP | ";           

                     return buf;
             }                                                                         


            static public String getOptOO(int opt){
                            String buf="";
                            //buf+=" code:"+opt;
                            if((MQConstants.MQOO_BIND_AS_Q_DEF                   & opt)!=0)buf+=" MQOO_BIND_AS_Q_DEF | ";            
                            if((MQConstants.MQOO_READ_AHEAD_AS_Q_DEF             & opt)!=0)buf+=" MQOO_READ_AHEAD_AS_Q_DEF | ";     
                            if((MQConstants.MQOO_INPUT_AS_Q_DEF                  & opt)!=0)buf+=" MQOO_INPUT_AS_Q_DEF | ";          
                            if((MQConstants.MQOO_INPUT_SHARED                    & opt)!=0)buf+=" MQOO_INPUT_SHARED | ";            
                            if((MQConstants.MQOO_INPUT_EXCLUSIVE                 & opt)!=0)buf+=" MQOO_INPUT_EXCLUSIVE | ";         
                            if((MQConstants.MQOO_BROWSE                          & opt)!=0)buf+=" MQOO_BROWSE | ";                  
                            if((MQConstants.MQOO_OUTPUT                          & opt)!=0)buf+=" MQOO_OUTPUT | ";                  
                            if((MQConstants.MQOO_INQUIRE                         & opt)!=0)buf+=" MQOO_INQUIRE | ";                 
                            if((MQConstants.MQOO_SET                             & opt)!=0)buf+=" MQOO_SET | ";                     
                            if((MQConstants.MQOO_SAVE_ALL_CONTEXT                & opt)!=0)buf+=" MQOO_SAVE_ALL_CONTEXT | ";        
                            if((MQConstants.MQOO_PASS_IDENTITY_CONTEXT           & opt)!=0)buf+=" MQOO_PASS_IDENTITY_CONTEXT | ";   
                            if((MQConstants.MQOO_PASS_ALL_CONTEXT                & opt)!=0)buf+=" MQOO_PASS_ALL_CONTEXT | ";        
                            if((MQConstants.MQOO_SET_IDENTITY_CONTEXT            & opt)!=0)buf+=" MQOO_SET_IDENTITY_CONTEXT | ";    
                            if((MQConstants.MQOO_SET_ALL_CONTEXT                 & opt)!=0)buf+=" MQOO_SET_ALL_CONTEXT | ";         
                            if((MQConstants.MQOO_ALTERNATE_USER_AUTHORITY        & opt)!=0)buf+=" MQOO_ALTERNATE_USER_AUTHORITY | ";
                            if((MQConstants.MQOO_FAIL_IF_QUIESCING               & opt)!=0)buf+=" MQOO_FAIL_IF_QUIESCING | ";       
                            if((MQConstants.MQOO_BIND_ON_OPEN                    & opt)!=0)buf+=" MQOO_BIND_ON_OPEN | ";            
                            if((MQConstants.MQOO_BIND_ON_GROUP                   & opt)!=0)buf+=" MQOO_BIND_ON_GROUP | ";           
                            if((MQConstants.MQOO_BIND_NOT_FIXED                  & opt)!=0)buf+=" MQOO_BIND_NOT_FIXED | ";          
                            if((MQConstants.MQOO_CO_OP                           & opt)!=0)buf+=" MQOO_CO_OP | ";                   
                            if((MQConstants.MQOO_NO_READ_AHEAD                   & opt)!=0)buf+=" MQOO_NO_READ_AHEAD | ";           
                            if((MQConstants.MQOO_READ_AHEAD                      & opt)!=0)buf+=" MQOO_READ_AHEAD | ";              
                            if((MQConstants.MQOO_NO_MULTICAST                    & opt)!=0)buf+=" MQOO_NO_MULTICAST | ";            
                            if((MQConstants.MQOO_RESOLVE_LOCAL_Q                 & opt)!=0)buf+=" MQOO_RESOLVE_LOCAL_Q | ";         
                            if((MQConstants.MQOO_RESOLVE_LOCAL_TOPIC             & opt)!=0)buf+=" MQOO_RESOLVE_LOCAL_TOPIC | ";     
                            if((MQConstants.MQOO_RESOLVE_NAMES                   & opt)!=0)buf+=" MQOO_RESOLVE_NAMES | ";           
                                                    
                     return buf;
             }                                                                         
                                                    




             static public String getRC(int opt){
                           String buf="";

                           if(MQConstants.MQRC_NONE                                  == opt)buf+=" MQRC_NONE                     ";    
                           if(MQConstants.MQRC_APPL_FIRST                            == opt)buf+=" MQRC_APPL_FIRST               ";    
                           if(MQConstants.MQRC_APPL_LAST                             == opt)buf+=" MQRC_APPL_LAST                ";    
                           if(MQConstants.MQRC_ALIAS_BASE_Q_TYPE_ERROR               == opt)buf+=" MQRC_ALIAS_BASE_Q_TYPE_ERROR  ";    
                           if(MQConstants.MQRC_ALREADY_CONNECTED                     == opt)buf+=" MQRC_ALREADY_CONNECTED        ";    
                           if(MQConstants.MQRC_BACKED_OUT                            == opt)buf+=" MQRC_BACKED_OUT               ";    
                           if(MQConstants.MQRC_BUFFER_ERROR                          == opt)buf+=" MQRC_BUFFER_ERROR             ";    
                           if(MQConstants.MQRC_BUFFER_LENGTH_ERROR                   == opt)buf+=" MQRC_BUFFER_LENGTH_ERROR      ";    
                           if(MQConstants.MQRC_CHAR_ATTR_LENGTH_ERROR                == opt)buf+=" MQRC_CHAR_ATTR_LENGTH_ERROR   ";    
                           if(MQConstants.MQRC_CHAR_ATTRS_ERROR                      == opt)buf+=" MQRC_CHAR_ATTRS_ERROR         ";    
                           if(MQConstants.MQRC_CHAR_ATTRS_TOO_SHORT                  == opt)buf+=" MQRC_CHAR_ATTRS_TOO_SHORT     ";    
                           if(MQConstants.MQRC_CONNECTION_BROKEN                     == opt)buf+=" MQRC_CONNECTION_BROKEN        ";    
                           if(MQConstants.MQRC_DATA_LENGTH_ERROR                     == opt)buf+=" MQRC_DATA_LENGTH_ERROR        ";    
                           if(MQConstants.MQRC_DYNAMIC_Q_NAME_ERROR                  == opt)buf+=" MQRC_DYNAMIC_Q_NAME_ERROR     ";    
                           if(MQConstants.MQRC_ENVIRONMENT_ERROR                     == opt)buf+=" MQRC_ENVIRONMENT_ERROR        ";    
                           if(MQConstants.MQRC_EXPIRY_ERROR                          == opt)buf+=" MQRC_EXPIRY_ERROR             ";    
                           if(MQConstants.MQRC_FEEDBACK_ERROR                        == opt)buf+=" MQRC_FEEDBACK_ERROR           ";    
                           if(MQConstants.MQRC_GET_INHIBITED                         == opt)buf+=" MQRC_GET_INHIBITED            ";    
                           if(MQConstants.MQRC_HANDLE_NOT_AVAILABLE                  == opt)buf+=" MQRC_HANDLE_NOT_AVAILABLE     ";    
                           if(MQConstants.MQRC_HCONN_ERROR                           == opt)buf+=" MQRC_HCONN_ERROR              ";    
                           if(MQConstants.MQRC_HOBJ_ERROR                            == opt)buf+=" MQRC_HOBJ_ERROR               ";    
                           if(MQConstants.MQRC_INHIBIT_VALUE_ERROR                   == opt)buf+=" MQRC_INHIBIT_VALUE_ERROR      ";    
                           if(MQConstants.MQRC_INT_ATTR_COUNT_ERROR                  == opt)buf+=" MQRC_INT_ATTR_COUNT_ERROR     ";    
                           if(MQConstants.MQRC_INT_ATTR_COUNT_TOO_SMALL              == opt)buf+=" MQRC_INT_ATTR_COUNT_TOO_SMALL ";    
                           if(MQConstants.MQRC_INT_ATTRS_ARRAY_ERROR                 == opt)buf+=" MQRC_INT_ATTRS_ARRAY_ERROR    ";    
                           if(MQConstants.MQRC_SYNCPOINT_LIMIT_REACHED               == opt)buf+=" MQRC_SYNCPOINT_LIMIT_REACHED  ";    
                           if(MQConstants.MQRC_MAX_CONNS_LIMIT_REACHED               == opt)buf+=" MQRC_MAX_CONNS_LIMIT_REACHED  ";    
                           if(MQConstants.MQRC_MD_ERROR                              == opt)buf+=" MQRC_MD_ERROR                 ";    
                           if(MQConstants.MQRC_MISSING_REPLY_TO_Q                    == opt)buf+=" MQRC_MISSING_REPLY_TO_Q       ";    
                           if(MQConstants.MQRC_MSG_TYPE_ERROR                        == opt)buf+=" MQRC_MSG_TYPE_ERROR           ";    
                           if(MQConstants.MQRC_MSG_TOO_BIG_FOR_Q                     == opt)buf+=" MQRC_MSG_TOO_BIG_FOR_Q        ";    
                           if(MQConstants.MQRC_MSG_TOO_BIG_FOR_Q_MGR                 == opt)buf+=" MQRC_MSG_TOO_BIG_FOR_Q_MGR    ";    
                           if(MQConstants.MQRC_NO_MSG_AVAILABLE                      == opt)buf+=" MQRC_NO_MSG_AVAILABLE         ";    
                           if(MQConstants.MQRC_NO_MSG_UNDER_CURSOR                   == opt)buf+=" MQRC_NO_MSG_UNDER_CURSOR      ";    
                           if(MQConstants.MQRC_NOT_AUTHORIZED                        == opt)buf+=" MQRC_NOT_AUTHORIZED           ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_BROWSE                   == opt)buf+=" MQRC_NOT_OPEN_FOR_BROWSE      ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_INPUT                    == opt)buf+=" MQRC_NOT_OPEN_FOR_INPUT       ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_INQUIRE                  == opt)buf+=" MQRC_NOT_OPEN_FOR_INQUIRE     ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_OUTPUT                   == opt)buf+=" MQRC_NOT_OPEN_FOR_OUTPUT      ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_SET                      == opt)buf+=" MQRC_NOT_OPEN_FOR_SET         ";    
                           if(MQConstants.MQRC_OBJECT_CHANGED                        == opt)buf+=" MQRC_OBJECT_CHANGED           ";    
                           if(MQConstants.MQRC_OBJECT_IN_USE                         == opt)buf+=" MQRC_OBJECT_IN_USE            ";    
                           if(MQConstants.MQRC_OBJECT_TYPE_ERROR                     == opt)buf+=" MQRC_OBJECT_TYPE_ERROR        ";    
                           if(MQConstants.MQRC_OD_ERROR                              == opt)buf+=" MQRC_OD_ERROR                 ";    
                           if(MQConstants.MQRC_OPTION_NOT_VALID_FOR_TYPE             == opt)buf+=" MQRC_OPTION_NOT_VALID_FOR_TYPE";    
                           if(MQConstants.MQRC_OPTIONS_ERROR                         == opt)buf+=" MQRC_OPTIONS_ERROR            ";    
                           if(MQConstants.MQRC_PERSISTENCE_ERROR                     == opt)buf+=" MQRC_PERSISTENCE_ERROR        ";    
                           if(MQConstants.MQRC_PERSISTENT_NOT_ALLOWED                == opt)buf+=" MQRC_PERSISTENT_NOT_ALLOWED   ";    
                           if(MQConstants.MQRC_PRIORITY_EXCEEDS_MAXIMUM              == opt)buf+=" MQRC_PRIORITY_EXCEEDS_MAXIMUM ";    
                           if(MQConstants.MQRC_PRIORITY_ERROR                        == opt)buf+=" MQRC_PRIORITY_ERROR           ";    
                           if(MQConstants.MQRC_PUT_INHIBITED                         == opt)buf+=" MQRC_PUT_INHIBITED            ";    
                           if(MQConstants.MQRC_Q_DELETED                             == opt)buf+=" MQRC_Q_DELETED                ";    
                           if(MQConstants.MQRC_Q_FULL                                == opt)buf+=" MQRC_Q_FULL                   ";    
                           if(MQConstants.MQRC_Q_NOT_EMPTY                           == opt)buf+=" MQRC_Q_NOT_EMPTY              ";    
                           if(MQConstants.MQRC_Q_SPACE_NOT_AVAILABLE                 == opt)buf+=" MQRC_Q_SPACE_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_Q_TYPE_ERROR                          == opt)buf+=" MQRC_Q_TYPE_ERROR             ";    
                           if(MQConstants.MQRC_Q_MGR_NAME_ERROR                      == opt)buf+=" MQRC_Q_MGR_NAME_ERROR         ";    
                           if(MQConstants.MQRC_Q_MGR_NOT_AVAILABLE                   == opt)buf+=" MQRC_Q_MGR_NOT_AVAILABLE      ";    
                           if(MQConstants.MQRC_REPORT_OPTIONS_ERROR                  == opt)buf+=" MQRC_REPORT_OPTIONS_ERROR     ";    
                           if(MQConstants.MQRC_SECOND_MARK_NOT_ALLOWED               == opt)buf+=" MQRC_SECOND_MARK_NOT_ALLOWED  ";    
                           if(MQConstants.MQRC_SECURITY_ERROR                        == opt)buf+=" MQRC_SECURITY_ERROR           ";    
                           if(MQConstants.MQRC_SELECTOR_COUNT_ERROR                  == opt)buf+=" MQRC_SELECTOR_COUNT_ERROR     ";    
                           if(MQConstants.MQRC_SELECTOR_LIMIT_EXCEEDED               == opt)buf+=" MQRC_SELECTOR_LIMIT_EXCEEDED  ";    
                           if(MQConstants.MQRC_SELECTOR_ERROR                        == opt)buf+=" MQRC_SELECTOR_ERROR           ";    
                           if(MQConstants.MQRC_SELECTOR_NOT_FOR_TYPE                 == opt)buf+=" MQRC_SELECTOR_NOT_FOR_TYPE    ";    
                           if(MQConstants.MQRC_SIGNAL_OUTSTANDING                    == opt)buf+=" MQRC_SIGNAL_OUTSTANDING       ";    
                           if(MQConstants.MQRC_SIGNAL_REQUEST_ACCEPTED               == opt)buf+=" MQRC_SIGNAL_REQUEST_ACCEPTED  ";    
                           if(MQConstants.MQRC_STORAGE_NOT_AVAILABLE                 == opt)buf+=" MQRC_STORAGE_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_SYNCPOINT_NOT_AVAILABLE               == opt)buf+=" MQRC_SYNCPOINT_NOT_AVAILABLE  ";    
                           if(MQConstants.MQRC_TRIGGER_CONTROL_ERROR                 == opt)buf+=" MQRC_TRIGGER_CONTROL_ERROR    ";    
                           if(MQConstants.MQRC_TRIGGER_DEPTH_ERROR                   == opt)buf+=" MQRC_TRIGGER_DEPTH_ERROR      ";    
                           if(MQConstants.MQRC_TRIGGER_MSG_PRIORITY_ERR              == opt)buf+=" MQRC_TRIGGER_MSG_PRIORITY_ERR ";    
                           if(MQConstants.MQRC_TRIGGER_TYPE_ERROR                    == opt)buf+=" MQRC_TRIGGER_TYPE_ERROR       ";    
                           if(MQConstants.MQRC_TRUNCATED_MSG_ACCEPTED                == opt)buf+=" MQRC_TRUNCATED_MSG_ACCEPTED   ";    
                           if(MQConstants.MQRC_TRUNCATED_MSG_FAILED                  == opt)buf+=" MQRC_TRUNCATED_MSG_FAILED     ";    
                           if(MQConstants.MQRC_UNKNOWN_ALIAS_BASE_Q                  == opt)buf+=" MQRC_UNKNOWN_ALIAS_BASE_Q     ";    
                           if(MQConstants.MQRC_UNKNOWN_OBJECT_NAME                   == opt)buf+=" MQRC_UNKNOWN_OBJECT_NAME      ";    
                           if(MQConstants.MQRC_UNKNOWN_OBJECT_Q_MGR                  == opt)buf+=" MQRC_UNKNOWN_OBJECT_Q_MGR     ";    
                           if(MQConstants.MQRC_UNKNOWN_REMOTE_Q_MGR                  == opt)buf+=" MQRC_UNKNOWN_REMOTE_Q_MGR     ";    
                           if(MQConstants.MQRC_WAIT_INTERVAL_ERROR                   == opt)buf+=" MQRC_WAIT_INTERVAL_ERROR      ";    
                           if(MQConstants.MQRC_XMIT_Q_TYPE_ERROR                     == opt)buf+=" MQRC_XMIT_Q_TYPE_ERROR        ";    
                           if(MQConstants.MQRC_XMIT_Q_USAGE_ERROR                    == opt)buf+=" MQRC_XMIT_Q_USAGE_ERROR       ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_PASS_ALL                 == opt)buf+=" MQRC_NOT_OPEN_FOR_PASS_ALL    ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_PASS_IDENT               == opt)buf+=" MQRC_NOT_OPEN_FOR_PASS_IDENT  ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_SET_ALL                  == opt)buf+=" MQRC_NOT_OPEN_FOR_SET_ALL     ";    
                           if(MQConstants.MQRC_NOT_OPEN_FOR_SET_IDENT                == opt)buf+=" MQRC_NOT_OPEN_FOR_SET_IDENT   ";    
                           if(MQConstants.MQRC_CONTEXT_HANDLE_ERROR                  == opt)buf+=" MQRC_CONTEXT_HANDLE_ERROR     ";    
                           if(MQConstants.MQRC_CONTEXT_NOT_AVAILABLE                 == opt)buf+=" MQRC_CONTEXT_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_SIGNAL1_ERROR                         == opt)buf+=" MQRC_SIGNAL1_ERROR            ";    
                           if(MQConstants.MQRC_OBJECT_ALREADY_EXISTS                 == opt)buf+=" MQRC_OBJECT_ALREADY_EXISTS    ";    
                           if(MQConstants.MQRC_OBJECT_DAMAGED                        == opt)buf+=" MQRC_OBJECT_DAMAGED           ";    
                           if(MQConstants.MQRC_RESOURCE_PROBLEM                      == opt)buf+=" MQRC_RESOURCE_PROBLEM         ";    
                           if(MQConstants.MQRC_ANOTHER_Q_MGR_CONNECTED               == opt)buf+=" MQRC_ANOTHER_Q_MGR_CONNECTED  ";    
                           if(MQConstants.MQRC_UNKNOWN_REPORT_OPTION                 == opt)buf+=" MQRC_UNKNOWN_REPORT_OPTION    ";    
                           if(MQConstants.MQRC_STORAGE_CLASS_ERROR                   == opt)buf+=" MQRC_STORAGE_CLASS_ERROR      ";    
                           if(MQConstants.MQRC_COD_NOT_VALID_FOR_XCF_Q               == opt)buf+=" MQRC_COD_NOT_VALID_FOR_XCF_Q  ";    
                           if(MQConstants.MQRC_XWAIT_CANCELED                        == opt)buf+=" MQRC_XWAIT_CANCELED           ";    
                           if(MQConstants.MQRC_XWAIT_ERROR                           == opt)buf+=" MQRC_XWAIT_ERROR              ";    
                           if(MQConstants.MQRC_SUPPRESSED_BY_EXIT                    == opt)buf+=" MQRC_SUPPRESSED_BY_EXIT       ";    
                           if(MQConstants.MQRC_FORMAT_ERROR                          == opt)buf+=" MQRC_FORMAT_ERROR             ";    
                           if(MQConstants.MQRC_SOURCE_CCSID_ERROR                    == opt)buf+=" MQRC_SOURCE_CCSID_ERROR       ";    
                           if(MQConstants.MQRC_SOURCE_INTEGER_ENC_ERROR              == opt)buf+=" MQRC_SOURCE_INTEGER_ENC_ERROR ";    
                           if(MQConstants.MQRC_SOURCE_DECIMAL_ENC_ERROR              == opt)buf+=" MQRC_SOURCE_DECIMAL_ENC_ERROR ";    
                           if(MQConstants.MQRC_SOURCE_FLOAT_ENC_ERROR                == opt)buf+=" MQRC_SOURCE_FLOAT_ENC_ERROR   ";    
                           if(MQConstants.MQRC_TARGET_CCSID_ERROR                    == opt)buf+=" MQRC_TARGET_CCSID_ERROR       ";    
                           if(MQConstants.MQRC_TARGET_INTEGER_ENC_ERROR              == opt)buf+=" MQRC_TARGET_INTEGER_ENC_ERROR ";    
                           if(MQConstants.MQRC_TARGET_DECIMAL_ENC_ERROR              == opt)buf+=" MQRC_TARGET_DECIMAL_ENC_ERROR ";    
                           if(MQConstants.MQRC_TARGET_FLOAT_ENC_ERROR                == opt)buf+=" MQRC_TARGET_FLOAT_ENC_ERROR   ";    
                           if(MQConstants.MQRC_NOT_CONVERTED                         == opt)buf+=" MQRC_NOT_CONVERTED            ";    
                           if(MQConstants.MQRC_CONVERTED_MSG_TOO_BIG                 == opt)buf+=" MQRC_CONVERTED_MSG_TOO_BIG    ";    
                           if(MQConstants.MQRC_TRUNCATED                             == opt)buf+=" MQRC_TRUNCATED                ";    
                           if(MQConstants.MQRC_NO_EXTERNAL_PARTICIPANTS              == opt)buf+=" MQRC_NO_EXTERNAL_PARTICIPANTS ";    
                           if(MQConstants.MQRC_PARTICIPANT_NOT_AVAILABLE             == opt)buf+=" MQRC_PARTICIPANT_NOT_AVAILABLE";    
                           if(MQConstants.MQRC_OUTCOME_MIXED                         == opt)buf+=" MQRC_OUTCOME_MIXED            ";    
                           if(MQConstants.MQRC_OUTCOME_PENDING                       == opt)buf+=" MQRC_OUTCOME_PENDING          ";    
                           if(MQConstants.MQRC_BRIDGE_STARTED                        == opt)buf+=" MQRC_BRIDGE_STARTED           ";    
                           if(MQConstants.MQRC_BRIDGE_STOPPED                        == opt)buf+=" MQRC_BRIDGE_STOPPED           ";    
                           if(MQConstants.MQRC_ADAPTER_STORAGE_SHORTAGE              == opt)buf+=" MQRC_ADAPTER_STORAGE_SHORTAGE ";    
                           if(MQConstants.MQRC_UOW_IN_PROGRESS                       == opt)buf+=" MQRC_UOW_IN_PROGRESS          ";    
                           if(MQConstants.MQRC_ADAPTER_CONN_LOAD_ERROR               == opt)buf+=" MQRC_ADAPTER_CONN_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_ADAPTER_SERV_LOAD_ERROR               == opt)buf+=" MQRC_ADAPTER_SERV_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_ADAPTER_DEFS_ERROR                    == opt)buf+=" MQRC_ADAPTER_DEFS_ERROR       ";    
                           if(MQConstants.MQRC_ADAPTER_DEFS_LOAD_ERROR               == opt)buf+=" MQRC_ADAPTER_DEFS_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_ADAPTER_CONV_LOAD_ERROR               == opt)buf+=" MQRC_ADAPTER_CONV_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_BO_ERROR                              == opt)buf+=" MQRC_BO_ERROR                 ";    
                           if(MQConstants.MQRC_DH_ERROR                              == opt)buf+=" MQRC_DH_ERROR                 ";    
                           if(MQConstants.MQRC_MULTIPLE_REASONS                      == opt)buf+=" MQRC_MULTIPLE_REASONS         ";    
                           if(MQConstants.MQRC_OPEN_FAILED                           == opt)buf+=" MQRC_OPEN_FAILED              ";    
                           if(MQConstants.MQRC_ADAPTER_DISC_LOAD_ERROR               == opt)buf+=" MQRC_ADAPTER_DISC_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_CNO_ERROR                             == opt)buf+=" MQRC_CNO_ERROR                ";    
                           if(MQConstants.MQRC_CICS_WAIT_FAILED                      == opt)buf+=" MQRC_CICS_WAIT_FAILED         ";    
                           if(MQConstants.MQRC_DLH_ERROR                             == opt)buf+=" MQRC_DLH_ERROR                ";    
                           if(MQConstants.MQRC_HEADER_ERROR                          == opt)buf+=" MQRC_HEADER_ERROR             ";    
                           if(MQConstants.MQRC_SOURCE_LENGTH_ERROR                   == opt)buf+=" MQRC_SOURCE_LENGTH_ERROR      ";    
                           if(MQConstants.MQRC_TARGET_LENGTH_ERROR                   == opt)buf+=" MQRC_TARGET_LENGTH_ERROR      ";    
                           if(MQConstants.MQRC_SOURCE_BUFFER_ERROR                   == opt)buf+=" MQRC_SOURCE_BUFFER_ERROR      ";    
                           if(MQConstants.MQRC_TARGET_BUFFER_ERROR                   == opt)buf+=" MQRC_TARGET_BUFFER_ERROR      ";    
                           if(MQConstants.MQRC_IIH_ERROR                             == opt)buf+=" MQRC_IIH_ERROR                ";    
                           if(MQConstants.MQRC_PCF_ERROR                             == opt)buf+=" MQRC_PCF_ERROR                ";    
                           if(MQConstants.MQRC_DBCS_ERROR                            == opt)buf+=" MQRC_DBCS_ERROR               ";    
                           if(MQConstants.MQRC_OBJECT_NAME_ERROR                     == opt)buf+=" MQRC_OBJECT_NAME_ERROR        ";    
                           if(MQConstants.MQRC_OBJECT_Q_MGR_NAME_ERROR               == opt)buf+=" MQRC_OBJECT_Q_MGR_NAME_ERROR  ";    
                           if(MQConstants.MQRC_RECS_PRESENT_ERROR                    == opt)buf+=" MQRC_RECS_PRESENT_ERROR       ";    
                           if(MQConstants.MQRC_OBJECT_RECORDS_ERROR                  == opt)buf+=" MQRC_OBJECT_RECORDS_ERROR     ";    
                           if(MQConstants.MQRC_RESPONSE_RECORDS_ERROR                == opt)buf+=" MQRC_RESPONSE_RECORDS_ERROR   ";    
                           if(MQConstants.MQRC_ASID_MISMATCH                         == opt)buf+=" MQRC_ASID_MISMATCH            ";    
                           if(MQConstants.MQRC_PMO_RECORD_FLAGS_ERROR                == opt)buf+=" MQRC_PMO_RECORD_FLAGS_ERROR   ";    
                           if(MQConstants.MQRC_PUT_MSG_RECORDS_ERROR                 == opt)buf+=" MQRC_PUT_MSG_RECORDS_ERROR    ";    
                           if(MQConstants.MQRC_CONN_ID_IN_USE                        == opt)buf+=" MQRC_CONN_ID_IN_USE           ";    
                           if(MQConstants.MQRC_Q_MGR_QUIESCING                       == opt)buf+=" MQRC_Q_MGR_QUIESCING          ";    
                           if(MQConstants.MQRC_Q_MGR_STOPPING                        == opt)buf+=" MQRC_Q_MGR_STOPPING           ";    
                           if(MQConstants.MQRC_DUPLICATE_RECOV_COORD                 == opt)buf+=" MQRC_DUPLICATE_RECOV_COORD    ";    
                           if(MQConstants.MQRC_PMO_ERROR                             == opt)buf+=" MQRC_PMO_ERROR                ";    
                           if(MQConstants.MQRC_API_EXIT_NOT_FOUND                    == opt)buf+=" MQRC_API_EXIT_NOT_FOUND       ";    
                           if(MQConstants.MQRC_API_EXIT_LOAD_ERROR                   == opt)buf+=" MQRC_API_EXIT_LOAD_ERROR      ";    
                           if(MQConstants.MQRC_REMOTE_Q_NAME_ERROR                   == opt)buf+=" MQRC_REMOTE_Q_NAME_ERROR      ";    
                           if(MQConstants.MQRC_INCONSISTENT_PERSISTENCE              == opt)buf+=" MQRC_INCONSISTENT_PERSISTENCE ";    
                           if(MQConstants.MQRC_GMO_ERROR                             == opt)buf+=" MQRC_GMO_ERROR                ";    
                           if(MQConstants.MQRC_CICS_BRIDGE_RESTRICTION               == opt)buf+=" MQRC_CICS_BRIDGE_RESTRICTION  ";    
                           if(MQConstants.MQRC_STOPPED_BY_CLUSTER_EXIT               == opt)buf+=" MQRC_STOPPED_BY_CLUSTER_EXIT  ";    
                           if(MQConstants.MQRC_CLUSTER_RESOLUTION_ERROR              == opt)buf+=" MQRC_CLUSTER_RESOLUTION_ERROR ";    
                           if(MQConstants.MQRC_CONVERTED_STRING_TOO_BIG              == opt)buf+=" MQRC_CONVERTED_STRING_TOO_BIG ";    
                           if(MQConstants.MQRC_TMC_ERROR                             == opt)buf+=" MQRC_TMC_ERROR                ";    
                           if(MQConstants.MQRC_PAGESET_FULL                          == opt)buf+=" MQRC_PAGESET_FULL             ";    
                           if(MQConstants.MQRC_STORAGE_MEDIUM_FULL                   == opt)buf+=" MQRC_STORAGE_MEDIUM_FULL      ";    
                           if(MQConstants.MQRC_PAGESET_ERROR                         == opt)buf+=" MQRC_PAGESET_ERROR            ";    
                           if(MQConstants.MQRC_NAME_NOT_VALID_FOR_TYPE               == opt)buf+=" MQRC_NAME_NOT_VALID_FOR_TYPE  ";    
                           if(MQConstants.MQRC_UNEXPECTED_ERROR                      == opt)buf+=" MQRC_UNEXPECTED_ERROR         ";    
                           if(MQConstants.MQRC_UNKNOWN_XMIT_Q                        == opt)buf+=" MQRC_UNKNOWN_XMIT_Q           ";    
                           if(MQConstants.MQRC_UNKNOWN_DEF_XMIT_Q                    == opt)buf+=" MQRC_UNKNOWN_DEF_XMIT_Q       ";    
                           if(MQConstants.MQRC_DEF_XMIT_Q_TYPE_ERROR                 == opt)buf+=" MQRC_DEF_XMIT_Q_TYPE_ERROR    ";    
                           if(MQConstants.MQRC_DEF_XMIT_Q_USAGE_ERROR                == opt)buf+=" MQRC_DEF_XMIT_Q_USAGE_ERROR   ";    
                           if(MQConstants.MQRC_MSG_MARKED_BROWSE_CO_OP               == opt)buf+=" MQRC_MSG_MARKED_BROWSE_CO_OP  ";    
                           if(MQConstants.MQRC_NAME_IN_USE                           == opt)buf+=" MQRC_NAME_IN_USE              ";    
                           if(MQConstants.MQRC_CONNECTION_QUIESCING                  == opt)buf+=" MQRC_CONNECTION_QUIESCING     ";    
                           if(MQConstants.MQRC_CONNECTION_STOPPING                   == opt)buf+=" MQRC_CONNECTION_STOPPING      ";    
                           if(MQConstants.MQRC_ADAPTER_NOT_AVAILABLE                 == opt)buf+=" MQRC_ADAPTER_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_MSG_ID_ERROR                          == opt)buf+=" MQRC_MSG_ID_ERROR             ";    
                           if(MQConstants.MQRC_CORREL_ID_ERROR                       == opt)buf+=" MQRC_CORREL_ID_ERROR          ";    
                           if(MQConstants.MQRC_FILE_SYSTEM_ERROR                     == opt)buf+=" MQRC_FILE_SYSTEM_ERROR        ";    
                           if(MQConstants.MQRC_NO_MSG_LOCKED                         == opt)buf+=" MQRC_NO_MSG_LOCKED            ";    
                           if(MQConstants.MQRC_SOAP_DOTNET_ERROR                     == opt)buf+=" MQRC_SOAP_DOTNET_ERROR        ";    
                           if(MQConstants.MQRC_SOAP_AXIS_ERROR                       == opt)buf+=" MQRC_SOAP_AXIS_ERROR          ";    
                           if(MQConstants.MQRC_SOAP_URL_ERROR                        == opt)buf+=" MQRC_SOAP_URL_ERROR           ";    
                           if(MQConstants.MQRC_FILE_NOT_AUDITED                      == opt)buf+=" MQRC_FILE_NOT_AUDITED         ";    
                           if(MQConstants.MQRC_CONNECTION_NOT_AUTHORIZED             == opt)buf+=" MQRC_CONNECTION_NOT_AUTHORIZED";    
                           if(MQConstants.MQRC_MSG_TOO_BIG_FOR_CHANNEL               == opt)buf+=" MQRC_MSG_TOO_BIG_FOR_CHANNEL  ";    
                           if(MQConstants.MQRC_CALL_IN_PROGRESS                      == opt)buf+=" MQRC_CALL_IN_PROGRESS         ";    
                           if(MQConstants.MQRC_RMH_ERROR                             == opt)buf+=" MQRC_RMH_ERROR                ";    
                           if(MQConstants.MQRC_Q_MGR_ACTIVE                          == opt)buf+=" MQRC_Q_MGR_ACTIVE             ";    
                           if(MQConstants.MQRC_Q_MGR_NOT_ACTIVE                      == opt)buf+=" MQRC_Q_MGR_NOT_ACTIVE         ";    
                           if(MQConstants.MQRC_Q_DEPTH_HIGH                          == opt)buf+=" MQRC_Q_DEPTH_HIGH             ";    
                           if(MQConstants.MQRC_Q_DEPTH_LOW                           == opt)buf+=" MQRC_Q_DEPTH_LOW              ";    
                           if(MQConstants.MQRC_Q_SERVICE_INTERVAL_HIGH               == opt)buf+=" MQRC_Q_SERVICE_INTERVAL_HIGH  ";    
                           if(MQConstants.MQRC_Q_SERVICE_INTERVAL_OK                 == opt)buf+=" MQRC_Q_SERVICE_INTERVAL_OK    ";    
                           if(MQConstants.MQRC_RFH_HEADER_FIELD_ERROR                == opt)buf+=" MQRC_RFH_HEADER_FIELD_ERROR   ";    
                           if(MQConstants.MQRC_RAS_PROPERTY_ERROR                    == opt)buf+=" MQRC_RAS_PROPERTY_ERROR       ";    
                           if(MQConstants.MQRC_UNIT_OF_WORK_NOT_STARTED              == opt)buf+=" MQRC_UNIT_OF_WORK_NOT_STARTED ";    
                           if(MQConstants.MQRC_CHANNEL_AUTO_DEF_OK                   == opt)buf+=" MQRC_CHANNEL_AUTO_DEF_OK      ";    
                           if(MQConstants.MQRC_CHANNEL_AUTO_DEF_ERROR                == opt)buf+=" MQRC_CHANNEL_AUTO_DEF_ERROR   ";    
                           if(MQConstants.MQRC_CFH_ERROR                             == opt)buf+=" MQRC_CFH_ERROR                ";    
                           if(MQConstants.MQRC_CFIL_ERROR                            == opt)buf+=" MQRC_CFIL_ERROR               ";    
                           if(MQConstants.MQRC_CFIN_ERROR                            == opt)buf+=" MQRC_CFIN_ERROR               ";    
                           if(MQConstants.MQRC_CFSL_ERROR                            == opt)buf+=" MQRC_CFSL_ERROR               ";    
                           if(MQConstants.MQRC_CFST_ERROR                            == opt)buf+=" MQRC_CFST_ERROR               ";    
                           if(MQConstants.MQRC_INCOMPLETE_GROUP                      == opt)buf+=" MQRC_INCOMPLETE_GROUP         ";    
                           if(MQConstants.MQRC_INCOMPLETE_MSG                        == opt)buf+=" MQRC_INCOMPLETE_MSG           ";    
                           if(MQConstants.MQRC_INCONSISTENT_CCSIDS                   == opt)buf+=" MQRC_INCONSISTENT_CCSIDS      ";    
                           if(MQConstants.MQRC_INCONSISTENT_ENCODINGS                == opt)buf+=" MQRC_INCONSISTENT_ENCODINGS   ";    
                           if(MQConstants.MQRC_INCONSISTENT_UOW                      == opt)buf+=" MQRC_INCONSISTENT_UOW         ";    
                           if(MQConstants.MQRC_INVALID_MSG_UNDER_CURSOR              == opt)buf+=" MQRC_INVALID_MSG_UNDER_CURSOR ";    
                           if(MQConstants.MQRC_MATCH_OPTIONS_ERROR                   == opt)buf+=" MQRC_MATCH_OPTIONS_ERROR      ";    
                           if(MQConstants.MQRC_MDE_ERROR                             == opt)buf+=" MQRC_MDE_ERROR                ";    
                           if(MQConstants.MQRC_MSG_FLAGS_ERROR                       == opt)buf+=" MQRC_MSG_FLAGS_ERROR          ";    
                           if(MQConstants.MQRC_MSG_SEQ_NUMBER_ERROR                  == opt)buf+=" MQRC_MSG_SEQ_NUMBER_ERROR     ";    
                           if(MQConstants.MQRC_OFFSET_ERROR                          == opt)buf+=" MQRC_OFFSET_ERROR             ";    
                           if(MQConstants.MQRC_ORIGINAL_LENGTH_ERROR                 == opt)buf+=" MQRC_ORIGINAL_LENGTH_ERROR    ";    
                           if(MQConstants.MQRC_SEGMENT_LENGTH_ZERO                   == opt)buf+=" MQRC_SEGMENT_LENGTH_ZERO      ";    
                           if(MQConstants.MQRC_UOW_NOT_AVAILABLE                     == opt)buf+=" MQRC_UOW_NOT_AVAILABLE        ";    
                           if(MQConstants.MQRC_WRONG_GMO_VERSION                     == opt)buf+=" MQRC_WRONG_GMO_VERSION        ";    
                           if(MQConstants.MQRC_WRONG_MD_VERSION                      == opt)buf+=" MQRC_WRONG_MD_VERSION         ";    
                           if(MQConstants.MQRC_GROUP_ID_ERROR                        == opt)buf+=" MQRC_GROUP_ID_ERROR           ";    
                           if(MQConstants.MQRC_INCONSISTENT_BROWSE                   == opt)buf+=" MQRC_INCONSISTENT_BROWSE      ";    
                           if(MQConstants.MQRC_XQH_ERROR                             == opt)buf+=" MQRC_XQH_ERROR                ";    
                           if(MQConstants.MQRC_SRC_ENV_ERROR                         == opt)buf+=" MQRC_SRC_ENV_ERROR            ";    
                           if(MQConstants.MQRC_SRC_NAME_ERROR                        == opt)buf+=" MQRC_SRC_NAME_ERROR           ";    
                           if(MQConstants.MQRC_DEST_ENV_ERROR                        == opt)buf+=" MQRC_DEST_ENV_ERROR           ";    
                           if(MQConstants.MQRC_DEST_NAME_ERROR                       == opt)buf+=" MQRC_DEST_NAME_ERROR          ";    
                           if(MQConstants.MQRC_TM_ERROR                              == opt)buf+=" MQRC_TM_ERROR                 ";    
                           if(MQConstants.MQRC_CLUSTER_EXIT_ERROR                    == opt)buf+=" MQRC_CLUSTER_EXIT_ERROR       ";    
                           if(MQConstants.MQRC_CLUSTER_EXIT_LOAD_ERROR               == opt)buf+=" MQRC_CLUSTER_EXIT_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_CLUSTER_PUT_INHIBITED                 == opt)buf+=" MQRC_CLUSTER_PUT_INHIBITED    ";    
                           if(MQConstants.MQRC_CLUSTER_RESOURCE_ERROR                == opt)buf+=" MQRC_CLUSTER_RESOURCE_ERROR   ";    
                           if(MQConstants.MQRC_NO_DESTINATIONS_AVAILABLE             == opt)buf+=" MQRC_NO_DESTINATIONS_AVAILABLE";    
                           if(MQConstants.MQRC_CONN_TAG_IN_USE                       == opt)buf+=" MQRC_CONN_TAG_IN_USE          ";    
                           if(MQConstants.MQRC_PARTIALLY_CONVERTED                   == opt)buf+=" MQRC_PARTIALLY_CONVERTED      ";    
                           if(MQConstants.MQRC_CONNECTION_ERROR                      == opt)buf+=" MQRC_CONNECTION_ERROR         ";    
                           if(MQConstants.MQRC_OPTION_ENVIRONMENT_ERROR              == opt)buf+=" MQRC_OPTION_ENVIRONMENT_ERROR ";    
                           if(MQConstants.MQRC_CD_ERROR                              == opt)buf+=" MQRC_CD_ERROR                 ";    
                           if(MQConstants.MQRC_CLIENT_CONN_ERROR                     == opt)buf+=" MQRC_CLIENT_CONN_ERROR        ";    
                           if(MQConstants.MQRC_CHANNEL_STOPPED_BY_USER               == opt)buf+=" MQRC_CHANNEL_STOPPED_BY_USER  ";    
                           if(MQConstants.MQRC_HCONFIG_ERROR                         == opt)buf+=" MQRC_HCONFIG_ERROR            ";    
                           if(MQConstants.MQRC_FUNCTION_ERROR                        == opt)buf+=" MQRC_FUNCTION_ERROR           ";    
                           if(MQConstants.MQRC_CHANNEL_STARTED                       == opt)buf+=" MQRC_CHANNEL_STARTED          ";    
                           if(MQConstants.MQRC_CHANNEL_STOPPED                       == opt)buf+=" MQRC_CHANNEL_STOPPED          ";    
                           if(MQConstants.MQRC_CHANNEL_CONV_ERROR                    == opt)buf+=" MQRC_CHANNEL_CONV_ERROR       ";    
                           if(MQConstants.MQRC_SERVICE_NOT_AVAILABLE                 == opt)buf+=" MQRC_SERVICE_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_INITIALIZATION_FAILED                 == opt)buf+=" MQRC_INITIALIZATION_FAILED    ";    
                           if(MQConstants.MQRC_TERMINATION_FAILED                    == opt)buf+=" MQRC_TERMINATION_FAILED       ";    
                           if(MQConstants.MQRC_UNKNOWN_Q_NAME                        == opt)buf+=" MQRC_UNKNOWN_Q_NAME           ";    
                           if(MQConstants.MQRC_SERVICE_ERROR                         == opt)buf+=" MQRC_SERVICE_ERROR            ";    
                           if(MQConstants.MQRC_Q_ALREADY_EXISTS                      == opt)buf+=" MQRC_Q_ALREADY_EXISTS         ";    
                           if(MQConstants.MQRC_USER_ID_NOT_AVAILABLE                 == opt)buf+=" MQRC_USER_ID_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_UNKNOWN_ENTITY                        == opt)buf+=" MQRC_UNKNOWN_ENTITY           ";    
                           if(MQConstants.MQRC_UNKNOWN_AUTH_ENTITY                   == opt)buf+=" MQRC_UNKNOWN_AUTH_ENTITY      ";    
                           if(MQConstants.MQRC_UNKNOWN_REF_OBJECT                    == opt)buf+=" MQRC_UNKNOWN_REF_OBJECT       ";    
                           if(MQConstants.MQRC_CHANNEL_ACTIVATED                     == opt)buf+=" MQRC_CHANNEL_ACTIVATED        ";    
                           if(MQConstants.MQRC_CHANNEL_NOT_ACTIVATED                 == opt)buf+=" MQRC_CHANNEL_NOT_ACTIVATED    ";    
                           if(MQConstants.MQRC_UOW_CANCELED                          == opt)buf+=" MQRC_UOW_CANCELED             ";    
                           if(MQConstants.MQRC_FUNCTION_NOT_SUPPORTED                == opt)buf+=" MQRC_FUNCTION_NOT_SUPPORTED   ";    
                           if(MQConstants.MQRC_SELECTOR_TYPE_ERROR                   == opt)buf+=" MQRC_SELECTOR_TYPE_ERROR      ";    
                           if(MQConstants.MQRC_COMMAND_TYPE_ERROR                    == opt)buf+=" MQRC_COMMAND_TYPE_ERROR       ";    
                           if(MQConstants.MQRC_MULTIPLE_INSTANCE_ERROR               == opt)buf+=" MQRC_MULTIPLE_INSTANCE_ERROR  ";    
                           if(MQConstants.MQRC_SYSTEM_ITEM_NOT_ALTERABLE             == opt)buf+=" MQRC_SYSTEM_ITEM_NOT_ALTERABLE";    
                           if(MQConstants.MQRC_BAG_CONVERSION_ERROR                  == opt)buf+=" MQRC_BAG_CONVERSION_ERROR     ";    
                           if(MQConstants.MQRC_SELECTOR_OUT_OF_RANGE                 == opt)buf+=" MQRC_SELECTOR_OUT_OF_RANGE    ";    
                           if(MQConstants.MQRC_SELECTOR_NOT_UNIQUE                   == opt)buf+=" MQRC_SELECTOR_NOT_UNIQUE      ";    
                           if(MQConstants.MQRC_INDEX_NOT_PRESENT                     == opt)buf+=" MQRC_INDEX_NOT_PRESENT        ";    
                           if(MQConstants.MQRC_STRING_ERROR                          == opt)buf+=" MQRC_STRING_ERROR             ";    
                           if(MQConstants.MQRC_ENCODING_NOT_SUPPORTED                == opt)buf+=" MQRC_ENCODING_NOT_SUPPORTED   ";    
                           if(MQConstants.MQRC_SELECTOR_NOT_PRESENT                  == opt)buf+=" MQRC_SELECTOR_NOT_PRESENT     ";    
                           if(MQConstants.MQRC_OUT_SELECTOR_ERROR                    == opt)buf+=" MQRC_OUT_SELECTOR_ERROR       ";    
                           if(MQConstants.MQRC_STRING_TRUNCATED                      == opt)buf+=" MQRC_STRING_TRUNCATED         ";    
                           if(MQConstants.MQRC_SELECTOR_WRONG_TYPE                   == opt)buf+=" MQRC_SELECTOR_WRONG_TYPE      ";    
                           if(MQConstants.MQRC_INCONSISTENT_ITEM_TYPE                == opt)buf+=" MQRC_INCONSISTENT_ITEM_TYPE   ";    
                           if(MQConstants.MQRC_INDEX_ERROR                           == opt)buf+=" MQRC_INDEX_ERROR              ";    
                           if(MQConstants.MQRC_SYSTEM_BAG_NOT_ALTERABLE              == opt)buf+=" MQRC_SYSTEM_BAG_NOT_ALTERABLE ";    
                           if(MQConstants.MQRC_ITEM_COUNT_ERROR                      == opt)buf+=" MQRC_ITEM_COUNT_ERROR         ";    
                           if(MQConstants.MQRC_FORMAT_NOT_SUPPORTED                  == opt)buf+=" MQRC_FORMAT_NOT_SUPPORTED     ";    
                           if(MQConstants.MQRC_SELECTOR_NOT_SUPPORTED                == opt)buf+=" MQRC_SELECTOR_NOT_SUPPORTED   ";    
                           if(MQConstants.MQRC_ITEM_VALUE_ERROR                      == opt)buf+=" MQRC_ITEM_VALUE_ERROR         ";    
                           if(MQConstants.MQRC_HBAG_ERROR                            == opt)buf+=" MQRC_HBAG_ERROR               ";    
                           if(MQConstants.MQRC_PARAMETER_MISSING                     == opt)buf+=" MQRC_PARAMETER_MISSING        ";    
                           if(MQConstants.MQRC_CMD_SERVER_NOT_AVAILABLE              == opt)buf+=" MQRC_CMD_SERVER_NOT_AVAILABLE ";    
                           if(MQConstants.MQRC_STRING_LENGTH_ERROR                   == opt)buf+=" MQRC_STRING_LENGTH_ERROR      ";    
                           if(MQConstants.MQRC_INQUIRY_COMMAND_ERROR                 == opt)buf+=" MQRC_INQUIRY_COMMAND_ERROR    ";    
                           if(MQConstants.MQRC_NESTED_BAG_NOT_SUPPORTED              == opt)buf+=" MQRC_NESTED_BAG_NOT_SUPPORTED ";    
                           if(MQConstants.MQRC_BAG_WRONG_TYPE                        == opt)buf+=" MQRC_BAG_WRONG_TYPE           ";    
                           if(MQConstants.MQRC_ITEM_TYPE_ERROR                       == opt)buf+=" MQRC_ITEM_TYPE_ERROR          ";    
                           if(MQConstants.MQRC_SYSTEM_BAG_NOT_DELETABLE              == opt)buf+=" MQRC_SYSTEM_BAG_NOT_DELETABLE ";    
                           if(MQConstants.MQRC_SYSTEM_ITEM_NOT_DELETABLE             == opt)buf+=" MQRC_SYSTEM_ITEM_NOT_DELETABLE";    
                           if(MQConstants.MQRC_CODED_CHAR_SET_ID_ERROR               == opt)buf+=" MQRC_CODED_CHAR_SET_ID_ERROR  ";    
                           if(MQConstants.MQRC_MSG_TOKEN_ERROR                       == opt)buf+=" MQRC_MSG_TOKEN_ERROR          ";    
                           if(MQConstants.MQRC_MISSING_WIH                           == opt)buf+=" MQRC_MISSING_WIH              ";    
                           if(MQConstants.MQRC_WIH_ERROR                             == opt)buf+=" MQRC_WIH_ERROR                ";    
                           if(MQConstants.MQRC_RFH_ERROR                             == opt)buf+=" MQRC_RFH_ERROR                ";    
                           if(MQConstants.MQRC_RFH_STRING_ERROR                      == opt)buf+=" MQRC_RFH_STRING_ERROR         ";    
                           if(MQConstants.MQRC_RFH_COMMAND_ERROR                     == opt)buf+=" MQRC_RFH_COMMAND_ERROR        ";    
                           if(MQConstants.MQRC_RFH_PARM_ERROR                        == opt)buf+=" MQRC_RFH_PARM_ERROR           ";    
                           if(MQConstants.MQRC_RFH_DUPLICATE_PARM                    == opt)buf+=" MQRC_RFH_DUPLICATE_PARM       ";    
                           if(MQConstants.MQRC_RFH_PARM_MISSING                      == opt)buf+=" MQRC_RFH_PARM_MISSING         ";    
                           if(MQConstants.MQRC_CHAR_CONVERSION_ERROR                 == opt)buf+=" MQRC_CHAR_CONVERSION_ERROR    ";    
                           if(MQConstants.MQRC_UCS2_CONVERSION_ERROR                 == opt)buf+=" MQRC_UCS2_CONVERSION_ERROR    ";    
                           if(MQConstants.MQRC_DB2_NOT_AVAILABLE                     == opt)buf+=" MQRC_DB2_NOT_AVAILABLE        ";    
                           if(MQConstants.MQRC_OBJECT_NOT_UNIQUE                     == opt)buf+=" MQRC_OBJECT_NOT_UNIQUE        ";    
                           if(MQConstants.MQRC_CONN_TAG_NOT_RELEASED                 == opt)buf+=" MQRC_CONN_TAG_NOT_RELEASED    ";    
                           if(MQConstants.MQRC_CF_NOT_AVAILABLE                      == opt)buf+=" MQRC_CF_NOT_AVAILABLE         ";    
                           if(MQConstants.MQRC_CF_STRUC_IN_USE                       == opt)buf+=" MQRC_CF_STRUC_IN_USE          ";    
                           if(MQConstants.MQRC_CF_STRUC_LIST_HDR_IN_USE              == opt)buf+=" MQRC_CF_STRUC_LIST_HDR_IN_USE ";    
                           if(MQConstants.MQRC_CF_STRUC_AUTH_FAILED                  == opt)buf+=" MQRC_CF_STRUC_AUTH_FAILED     ";    
                           if(MQConstants.MQRC_CF_STRUC_ERROR                        == opt)buf+=" MQRC_CF_STRUC_ERROR           ";    
                           if(MQConstants.MQRC_CONN_TAG_NOT_USABLE                   == opt)buf+=" MQRC_CONN_TAG_NOT_USABLE      ";    
                           if(MQConstants.MQRC_GLOBAL_UOW_CONFLICT                   == opt)buf+=" MQRC_GLOBAL_UOW_CONFLICT      ";    
                           if(MQConstants.MQRC_LOCAL_UOW_CONFLICT                    == opt)buf+=" MQRC_LOCAL_UOW_CONFLICT       ";    
                           if(MQConstants.MQRC_HANDLE_IN_USE_FOR_UOW                 == opt)buf+=" MQRC_HANDLE_IN_USE_FOR_UOW    ";    
                           if(MQConstants.MQRC_UOW_ENLISTMENT_ERROR                  == opt)buf+=" MQRC_UOW_ENLISTMENT_ERROR     ";    
                           if(MQConstants.MQRC_UOW_MIX_NOT_SUPPORTED                 == opt)buf+=" MQRC_UOW_MIX_NOT_SUPPORTED    ";    
                           if(MQConstants.MQRC_WXP_ERROR                             == opt)buf+=" MQRC_WXP_ERROR                ";    
                           if(MQConstants.MQRC_CURRENT_RECORD_ERROR                  == opt)buf+=" MQRC_CURRENT_RECORD_ERROR     ";    
                           if(MQConstants.MQRC_NEXT_OFFSET_ERROR                     == opt)buf+=" MQRC_NEXT_OFFSET_ERROR        ";    
                           if(MQConstants.MQRC_NO_RECORD_AVAILABLE                   == opt)buf+=" MQRC_NO_RECORD_AVAILABLE      ";    
                           if(MQConstants.MQRC_OBJECT_LEVEL_INCOMPATIBLE             == opt)buf+=" MQRC_OBJECT_LEVEL_INCOMPATIBLE";    
                           if(MQConstants.MQRC_NEXT_RECORD_ERROR                     == opt)buf+=" MQRC_NEXT_RECORD_ERROR        ";    
                           if(MQConstants.MQRC_BACKOUT_THRESHOLD_REACHED             == opt)buf+=" MQRC_BACKOUT_THRESHOLD_REACHED";    
                           if(MQConstants.MQRC_MSG_NOT_MATCHED                       == opt)buf+=" MQRC_MSG_NOT_MATCHED          ";    
                           if(MQConstants.MQRC_JMS_FORMAT_ERROR                      == opt)buf+=" MQRC_JMS_FORMAT_ERROR         ";    
                           if(MQConstants.MQRC_SEGMENTS_NOT_SUPPORTED                == opt)buf+=" MQRC_SEGMENTS_NOT_SUPPORTED   ";    
                           if(MQConstants.MQRC_WRONG_CF_LEVEL                        == opt)buf+=" MQRC_WRONG_CF_LEVEL           ";    
                           if(MQConstants.MQRC_CONFIG_CREATE_OBJECT                  == opt)buf+=" MQRC_CONFIG_CREATE_OBJECT     ";    
                           if(MQConstants.MQRC_CONFIG_CHANGE_OBJECT                  == opt)buf+=" MQRC_CONFIG_CHANGE_OBJECT     ";    
                           if(MQConstants.MQRC_CONFIG_DELETE_OBJECT                  == opt)buf+=" MQRC_CONFIG_DELETE_OBJECT     ";    
                           if(MQConstants.MQRC_CONFIG_REFRESH_OBJECT                 == opt)buf+=" MQRC_CONFIG_REFRESH_OBJECT    ";    
                           if(MQConstants.MQRC_CHANNEL_SSL_ERROR                     == opt)buf+=" MQRC_CHANNEL_SSL_ERROR        ";    
                           if(MQConstants.MQRC_PARTICIPANT_NOT_DEFINED               == opt)buf+=" MQRC_PARTICIPANT_NOT_DEFINED  ";    
                           if(MQConstants.MQRC_CF_STRUC_FAILED                       == opt)buf+=" MQRC_CF_STRUC_FAILED          ";    
                           if(MQConstants.MQRC_API_EXIT_ERROR                        == opt)buf+=" MQRC_API_EXIT_ERROR           ";    
                           if(MQConstants.MQRC_API_EXIT_INIT_ERROR                   == opt)buf+=" MQRC_API_EXIT_INIT_ERROR      ";    
                           if(MQConstants.MQRC_API_EXIT_TERM_ERROR                   == opt)buf+=" MQRC_API_EXIT_TERM_ERROR      ";    
                           if(MQConstants.MQRC_EXIT_REASON_ERROR                     == opt)buf+=" MQRC_EXIT_REASON_ERROR        ";    
                           if(MQConstants.MQRC_RESERVED_VALUE_ERROR                  == opt)buf+=" MQRC_RESERVED_VALUE_ERROR     ";    
                           if(MQConstants.MQRC_NO_DATA_AVAILABLE                     == opt)buf+=" MQRC_NO_DATA_AVAILABLE        ";    
                           if(MQConstants.MQRC_SCO_ERROR                             == opt)buf+=" MQRC_SCO_ERROR                ";    
                           if(MQConstants.MQRC_KEY_REPOSITORY_ERROR                  == opt)buf+=" MQRC_KEY_REPOSITORY_ERROR     ";    
                           if(MQConstants.MQRC_CRYPTO_HARDWARE_ERROR                 == opt)buf+=" MQRC_CRYPTO_HARDWARE_ERROR    ";    
                           if(MQConstants.MQRC_AUTH_INFO_REC_COUNT_ERROR             == opt)buf+=" MQRC_AUTH_INFO_REC_COUNT_ERROR";    
                           if(MQConstants.MQRC_AUTH_INFO_REC_ERROR                   == opt)buf+=" MQRC_AUTH_INFO_REC_ERROR      ";    
                           if(MQConstants.MQRC_AIR_ERROR                             == opt)buf+=" MQRC_AIR_ERROR                ";    
                           if(MQConstants.MQRC_AUTH_INFO_TYPE_ERROR                  == opt)buf+=" MQRC_AUTH_INFO_TYPE_ERROR     ";    
                           if(MQConstants.MQRC_AUTH_INFO_CONN_NAME_ERROR             == opt)buf+=" MQRC_AUTH_INFO_CONN_NAME_ERROR";    
                           if(MQConstants.MQRC_LDAP_USER_NAME_ERROR                  == opt)buf+=" MQRC_LDAP_USER_NAME_ERROR     ";    
                           if(MQConstants.MQRC_LDAP_USER_NAME_LENGTH_ERR             == opt)buf+=" MQRC_LDAP_USER_NAME_LENGTH_ERR";    
                           if(MQConstants.MQRC_LDAP_PASSWORD_ERROR                   == opt)buf+=" MQRC_LDAP_PASSWORD_ERROR      ";    
                           if(MQConstants.MQRC_SSL_ALREADY_INITIALIZED               == opt)buf+=" MQRC_SSL_ALREADY_INITIALIZED  ";    
                           if(MQConstants.MQRC_SSL_CONFIG_ERROR                      == opt)buf+=" MQRC_SSL_CONFIG_ERROR         ";    
                           if(MQConstants.MQRC_SSL_INITIALIZATION_ERROR              == opt)buf+=" MQRC_SSL_INITIALIZATION_ERROR ";    
                           if(MQConstants.MQRC_Q_INDEX_TYPE_ERROR                    == opt)buf+=" MQRC_Q_INDEX_TYPE_ERROR       ";    
                           if(MQConstants.MQRC_CFBS_ERROR                            == opt)buf+=" MQRC_CFBS_ERROR               ";    
                           if(MQConstants.MQRC_SSL_NOT_ALLOWED                       == opt)buf+=" MQRC_SSL_NOT_ALLOWED          ";    
                           if(MQConstants.MQRC_JSSE_ERROR                            == opt)buf+=" MQRC_JSSE_ERROR               ";    
                           if(MQConstants.MQRC_SSL_PEER_NAME_MISMATCH                == opt)buf+=" MQRC_SSL_PEER_NAME_MISMATCH   ";    
                           if(MQConstants.MQRC_SSL_PEER_NAME_ERROR                   == opt)buf+=" MQRC_SSL_PEER_NAME_ERROR      ";    
                           if(MQConstants.MQRC_UNSUPPORTED_CIPHER_SUITE              == opt)buf+=" MQRC_UNSUPPORTED_CIPHER_SUITE ";    
                           if(MQConstants.MQRC_SSL_CERTIFICATE_REVOKED               == opt)buf+=" MQRC_SSL_CERTIFICATE_REVOKED  ";    
                           if(MQConstants.MQRC_SSL_CERT_STORE_ERROR                  == opt)buf+=" MQRC_SSL_CERT_STORE_ERROR     ";    
                           if(MQConstants.MQRC_CLIENT_EXIT_LOAD_ERROR                == opt)buf+=" MQRC_CLIENT_EXIT_LOAD_ERROR   ";    
                           if(MQConstants.MQRC_CLIENT_EXIT_ERROR                     == opt)buf+=" MQRC_CLIENT_EXIT_ERROR        ";    
                           if(MQConstants.MQRC_UOW_COMMITTED                         == opt)buf+=" MQRC_UOW_COMMITTED            ";    
                           if(MQConstants.MQRC_SSL_KEY_RESET_ERROR                   == opt)buf+=" MQRC_SSL_KEY_RESET_ERROR      ";    
                           if(MQConstants.MQRC_UNKNOWN_COMPONENT_NAME                == opt)buf+=" MQRC_UNKNOWN_COMPONENT_NAME   ";    
                           if(MQConstants.MQRC_LOGGER_STATUS                         == opt)buf+=" MQRC_LOGGER_STATUS            ";    
                           if(MQConstants.MQRC_COMMAND_MQSC                          == opt)buf+=" MQRC_COMMAND_MQSC             ";    
                           if(MQConstants.MQRC_COMMAND_PCF                           == opt)buf+=" MQRC_COMMAND_PCF              ";    
                           if(MQConstants.MQRC_CFIF_ERROR                            == opt)buf+=" MQRC_CFIF_ERROR               ";    
                           if(MQConstants.MQRC_CFSF_ERROR                            == opt)buf+=" MQRC_CFSF_ERROR               ";    
                           if(MQConstants.MQRC_CFGR_ERROR                            == opt)buf+=" MQRC_CFGR_ERROR               ";    
                           if(MQConstants.MQRC_MSG_NOT_ALLOWED_IN_GROUP              == opt)buf+=" MQRC_MSG_NOT_ALLOWED_IN_GROUP ";    
                           if(MQConstants.MQRC_FILTER_OPERATOR_ERROR                 == opt)buf+=" MQRC_FILTER_OPERATOR_ERROR    ";    
                           if(MQConstants.MQRC_NESTED_SELECTOR_ERROR                 == opt)buf+=" MQRC_NESTED_SELECTOR_ERROR    ";    
                           if(MQConstants.MQRC_EPH_ERROR                             == opt)buf+=" MQRC_EPH_ERROR                ";    
                           if(MQConstants.MQRC_RFH_FORMAT_ERROR                      == opt)buf+=" MQRC_RFH_FORMAT_ERROR         ";    
                           if(MQConstants.MQRC_CFBF_ERROR                            == opt)buf+=" MQRC_CFBF_ERROR               ";    
                           if(MQConstants.MQRC_CLIENT_CHANNEL_CONFLICT               == opt)buf+=" MQRC_CLIENT_CHANNEL_CONFLICT  ";    
                           if(MQConstants.MQRC_SD_ERROR                              == opt)buf+=" MQRC_SD_ERROR                 ";    
                           if(MQConstants.MQRC_TOPIC_STRING_ERROR                    == opt)buf+=" MQRC_TOPIC_STRING_ERROR       ";    
                           if(MQConstants.MQRC_STS_ERROR                             == opt)buf+=" MQRC_STS_ERROR                ";    
                           if(MQConstants.MQRC_NO_SUBSCRIPTION                       == opt)buf+=" MQRC_NO_SUBSCRIPTION          ";    
                           if(MQConstants.MQRC_SUBSCRIPTION_IN_USE                   == opt)buf+=" MQRC_SUBSCRIPTION_IN_USE      ";    
                           if(MQConstants.MQRC_STAT_TYPE_ERROR                       == opt)buf+=" MQRC_STAT_TYPE_ERROR          ";    
                           if(MQConstants.MQRC_SUB_USER_DATA_ERROR                   == opt)buf+=" MQRC_SUB_USER_DATA_ERROR      ";    
                           if(MQConstants.MQRC_SUB_ALREADY_EXISTS                    == opt)buf+=" MQRC_SUB_ALREADY_EXISTS       ";    
                           if(MQConstants.MQRC_IDENTITY_MISMATCH                     == opt)buf+=" MQRC_IDENTITY_MISMATCH        ";    
                           if(MQConstants.MQRC_ALTER_SUB_ERROR                       == opt)buf+=" MQRC_ALTER_SUB_ERROR          ";    
                           if(MQConstants.MQRC_DURABILITY_NOT_ALLOWED                == opt)buf+=" MQRC_DURABILITY_NOT_ALLOWED   ";    
                           if(MQConstants.MQRC_NO_RETAINED_MSG                       == opt)buf+=" MQRC_NO_RETAINED_MSG          ";    
                           if(MQConstants.MQRC_SRO_ERROR                             == opt)buf+=" MQRC_SRO_ERROR                ";    
                           if(MQConstants.MQRC_SUB_NAME_ERROR                        == opt)buf+=" MQRC_SUB_NAME_ERROR           ";    
                           if(MQConstants.MQRC_OBJECT_STRING_ERROR                   == opt)buf+=" MQRC_OBJECT_STRING_ERROR      ";    
                           if(MQConstants.MQRC_PROPERTY_NAME_ERROR                   == opt)buf+=" MQRC_PROPERTY_NAME_ERROR      ";    
                           if(MQConstants.MQRC_SEGMENTATION_NOT_ALLOWED              == opt)buf+=" MQRC_SEGMENTATION_NOT_ALLOWED ";    
                           if(MQConstants.MQRC_CBD_ERROR                             == opt)buf+=" MQRC_CBD_ERROR                ";    
                           if(MQConstants.MQRC_CTLO_ERROR                            == opt)buf+=" MQRC_CTLO_ERROR               ";    
                           if(MQConstants.MQRC_NO_CALLBACKS_ACTIVE                   == opt)buf+=" MQRC_NO_CALLBACKS_ACTIVE      ";    
                           if(MQConstants.MQRC_CALLBACK_NOT_REGISTERED               == opt)buf+=" MQRC_CALLBACK_NOT_REGISTERED  ";    
                           if(MQConstants.MQRC_OPTIONS_CHANGED                       == opt)buf+=" MQRC_OPTIONS_CHANGED          ";    
                           if(MQConstants.MQRC_READ_AHEAD_MSGS                       == opt)buf+=" MQRC_READ_AHEAD_MSGS          ";    
                           if(MQConstants.MQRC_SELECTOR_SYNTAX_ERROR                 == opt)buf+=" MQRC_SELECTOR_SYNTAX_ERROR    ";    
                           if(MQConstants.MQRC_HMSG_ERROR                            == opt)buf+=" MQRC_HMSG_ERROR               ";    
                           if(MQConstants.MQRC_CMHO_ERROR                            == opt)buf+=" MQRC_CMHO_ERROR               ";    
                           if(MQConstants.MQRC_DMHO_ERROR                            == opt)buf+=" MQRC_DMHO_ERROR               ";    
                           if(MQConstants.MQRC_SMPO_ERROR                            == opt)buf+=" MQRC_SMPO_ERROR               ";    
                           if(MQConstants.MQRC_IMPO_ERROR                            == opt)buf+=" MQRC_IMPO_ERROR               ";    
                           if(MQConstants.MQRC_PROPERTY_NAME_TOO_BIG                 == opt)buf+=" MQRC_PROPERTY_NAME_TOO_BIG    ";    
                           if(MQConstants.MQRC_PROP_VALUE_NOT_CONVERTED              == opt)buf+=" MQRC_PROP_VALUE_NOT_CONVERTED ";    
                           if(MQConstants.MQRC_PROP_TYPE_NOT_SUPPORTED               == opt)buf+=" MQRC_PROP_TYPE_NOT_SUPPORTED  ";    
                           if(MQConstants.MQRC_PROPERTY_VALUE_TOO_BIG                == opt)buf+=" MQRC_PROPERTY_VALUE_TOO_BIG   ";    
                           if(MQConstants.MQRC_PROP_CONV_NOT_SUPPORTED               == opt)buf+=" MQRC_PROP_CONV_NOT_SUPPORTED  ";    
                           if(MQConstants.MQRC_PROPERTY_NOT_AVAILABLE                == opt)buf+=" MQRC_PROPERTY_NOT_AVAILABLE   ";    
                           if(MQConstants.MQRC_PROP_NUMBER_FORMAT_ERROR              == opt)buf+=" MQRC_PROP_NUMBER_FORMAT_ERROR ";    
                           if(MQConstants.MQRC_PROPERTY_TYPE_ERROR                   == opt)buf+=" MQRC_PROPERTY_TYPE_ERROR      ";    
                           if(MQConstants.MQRC_PROPERTIES_TOO_BIG                    == opt)buf+=" MQRC_PROPERTIES_TOO_BIG       ";    
                           if(MQConstants.MQRC_PUT_NOT_RETAINED                      == opt)buf+=" MQRC_PUT_NOT_RETAINED         ";    
                           if(MQConstants.MQRC_ALIAS_TARGTYPE_CHANGED                == opt)buf+=" MQRC_ALIAS_TARGTYPE_CHANGED   ";    
                           if(MQConstants.MQRC_DMPO_ERROR                            == opt)buf+=" MQRC_DMPO_ERROR               ";    
                           if(MQConstants.MQRC_PD_ERROR                              == opt)buf+=" MQRC_PD_ERROR                 ";    
                           if(MQConstants.MQRC_CALLBACK_TYPE_ERROR                   == opt)buf+=" MQRC_CALLBACK_TYPE_ERROR      ";    
                           if(MQConstants.MQRC_CBD_OPTIONS_ERROR                     == opt)buf+=" MQRC_CBD_OPTIONS_ERROR        ";    
                           if(MQConstants.MQRC_MAX_MSG_LENGTH_ERROR                  == opt)buf+=" MQRC_MAX_MSG_LENGTH_ERROR     ";    
                           if(MQConstants.MQRC_CALLBACK_ROUTINE_ERROR                == opt)buf+=" MQRC_CALLBACK_ROUTINE_ERROR   ";    
                           if(MQConstants.MQRC_CALLBACK_LINK_ERROR                   == opt)buf+=" MQRC_CALLBACK_LINK_ERROR      ";    
                           if(MQConstants.MQRC_OPERATION_ERROR                       == opt)buf+=" MQRC_OPERATION_ERROR          ";    
                           if(MQConstants.MQRC_BMHO_ERROR                            == opt)buf+=" MQRC_BMHO_ERROR               ";    
                           if(MQConstants.MQRC_UNSUPPORTED_PROPERTY                  == opt)buf+=" MQRC_UNSUPPORTED_PROPERTY     ";    
                           if(MQConstants.MQRC_PROP_NAME_NOT_CONVERTED               == opt)buf+=" MQRC_PROP_NAME_NOT_CONVERTED  ";    
                           if(MQConstants.MQRC_GET_ENABLED                           == opt)buf+=" MQRC_GET_ENABLED              ";    
                           if(MQConstants.MQRC_MODULE_NOT_FOUND                      == opt)buf+=" MQRC_MODULE_NOT_FOUND         ";    
                           if(MQConstants.MQRC_MODULE_INVALID                        == opt)buf+=" MQRC_MODULE_INVALID           ";    
                           if(MQConstants.MQRC_MODULE_ENTRY_NOT_FOUND                == opt)buf+=" MQRC_MODULE_ENTRY_NOT_FOUND   ";    
                           if(MQConstants.MQRC_MIXED_CONTENT_NOT_ALLOWED             == opt)buf+=" MQRC_MIXED_CONTENT_NOT_ALLOWED";    
                           if(MQConstants.MQRC_MSG_HANDLE_IN_USE                     == opt)buf+=" MQRC_MSG_HANDLE_IN_USE        ";    
                           if(MQConstants.MQRC_HCONN_ASYNC_ACTIVE                    == opt)buf+=" MQRC_HCONN_ASYNC_ACTIVE       ";    
                           if(MQConstants.MQRC_MHBO_ERROR                            == opt)buf+=" MQRC_MHBO_ERROR               ";    
                           if(MQConstants.MQRC_PUBLICATION_FAILURE                   == opt)buf+=" MQRC_PUBLICATION_FAILURE      ";    
                           if(MQConstants.MQRC_SUB_INHIBITED                         == opt)buf+=" MQRC_SUB_INHIBITED            ";    
                           if(MQConstants.MQRC_SELECTOR_ALWAYS_FALSE                 == opt)buf+=" MQRC_SELECTOR_ALWAYS_FALSE    ";    
                           if(MQConstants.MQRC_XEPO_ERROR                            == opt)buf+=" MQRC_XEPO_ERROR               ";    
                           if(MQConstants.MQRC_DURABILITY_NOT_ALTERABLE              == opt)buf+=" MQRC_DURABILITY_NOT_ALTERABLE ";    
                           if(MQConstants.MQRC_TOPIC_NOT_ALTERABLE                   == opt)buf+=" MQRC_TOPIC_NOT_ALTERABLE      ";    
                           if(MQConstants.MQRC_SUBLEVEL_NOT_ALTERABLE                == opt)buf+=" MQRC_SUBLEVEL_NOT_ALTERABLE   ";    
                           if(MQConstants.MQRC_PROPERTY_NAME_LENGTH_ERR              == opt)buf+=" MQRC_PROPERTY_NAME_LENGTH_ERR ";    
                           if(MQConstants.MQRC_DUPLICATE_GROUP_SUB                   == opt)buf+=" MQRC_DUPLICATE_GROUP_SUB      ";    
                           if(MQConstants.MQRC_GROUPING_NOT_ALTERABLE                == opt)buf+=" MQRC_GROUPING_NOT_ALTERABLE   ";    
                           if(MQConstants.MQRC_SELECTOR_INVALID_FOR_TYPE             == opt)buf+=" MQRC_SELECTOR_INVALID_FOR_TYPE";    
                           if(MQConstants.MQRC_HOBJ_QUIESCED                         == opt)buf+=" MQRC_HOBJ_QUIESCED            ";    
                           if(MQConstants.MQRC_HOBJ_QUIESCED_NO_MSGS                 == opt)buf+=" MQRC_HOBJ_QUIESCED_NO_MSGS    ";    
                           if(MQConstants.MQRC_SELECTION_STRING_ERROR                == opt)buf+=" MQRC_SELECTION_STRING_ERROR   ";    
                           if(MQConstants.MQRC_RES_OBJECT_STRING_ERROR               == opt)buf+=" MQRC_RES_OBJECT_STRING_ERROR  ";    
                           if(MQConstants.MQRC_CONNECTION_SUSPENDED                  == opt)buf+=" MQRC_CONNECTION_SUSPENDED     ";    
                           if(MQConstants.MQRC_INVALID_DESTINATION                   == opt)buf+=" MQRC_INVALID_DESTINATION      ";    
                           if(MQConstants.MQRC_INVALID_SUBSCRIPTION                  == opt)buf+=" MQRC_INVALID_SUBSCRIPTION     ";    
                           if(MQConstants.MQRC_SELECTOR_NOT_ALTERABLE                == opt)buf+=" MQRC_SELECTOR_NOT_ALTERABLE   ";    
                           if(MQConstants.MQRC_RETAINED_MSG_Q_ERROR                  == opt)buf+=" MQRC_RETAINED_MSG_Q_ERROR     ";    
                           if(MQConstants.MQRC_RETAINED_NOT_DELIVERED                == opt)buf+=" MQRC_RETAINED_NOT_DELIVERED   ";    
                           if(MQConstants.MQRC_RFH_RESTRICTED_FORMAT_ERR             == opt)buf+=" MQRC_RFH_RESTRICTED_FORMAT_ERR";    
                           if(MQConstants.MQRC_CONNECTION_STOPPED                    == opt)buf+=" MQRC_CONNECTION_STOPPED       ";    
                           if(MQConstants.MQRC_ASYNC_UOW_CONFLICT                    == opt)buf+=" MQRC_ASYNC_UOW_CONFLICT       ";    
                           if(MQConstants.MQRC_ASYNC_XA_CONFLICT                     == opt)buf+=" MQRC_ASYNC_XA_CONFLICT        ";    
                           if(MQConstants.MQRC_PUBSUB_INHIBITED                      == opt)buf+=" MQRC_PUBSUB_INHIBITED         ";    
                           if(MQConstants.MQRC_MSG_HANDLE_COPY_FAILURE               == opt)buf+=" MQRC_MSG_HANDLE_COPY_FAILURE  ";    
                           if(MQConstants.MQRC_DEST_CLASS_NOT_ALTERABLE              == opt)buf+=" MQRC_DEST_CLASS_NOT_ALTERABLE ";    
                           if(MQConstants.MQRC_OPERATION_NOT_ALLOWED                 == opt)buf+=" MQRC_OPERATION_NOT_ALLOWED    ";    
                           if(MQConstants.MQRC_ACTION_ERROR                          == opt)buf+=" MQRC_ACTION_ERROR             ";    
                           if(MQConstants.MQRC_CHANNEL_NOT_AVAILABLE                 == opt)buf+=" MQRC_CHANNEL_NOT_AVAILABLE    ";    
                           if(MQConstants.MQRC_HOST_NOT_AVAILABLE                    == opt)buf+=" MQRC_HOST_NOT_AVAILABLE       ";    
                           if(MQConstants.MQRC_CHANNEL_CONFIG_ERROR                  == opt)buf+=" MQRC_CHANNEL_CONFIG_ERROR     ";    
                           if(MQConstants.MQRC_UNKNOWN_CHANNEL_NAME                  == opt)buf+=" MQRC_UNKNOWN_CHANNEL_NAME     ";    
                           if(MQConstants.MQRC_LOOPING_PUBLICATION                   == opt)buf+=" MQRC_LOOPING_PUBLICATION      ";    
                           if(MQConstants.MQRC_ALREADY_JOINED                        == opt)buf+=" MQRC_ALREADY_JOINED           ";    
                           if(MQConstants.MQRC_STANDBY_Q_MGR                         == opt)buf+=" MQRC_STANDBY_Q_MGR            ";    
                           if(MQConstants.MQRC_RECONNECTING                          == opt)buf+=" MQRC_RECONNECTING             ";    
                           if(MQConstants.MQRC_RECONNECTED                           == opt)buf+=" MQRC_RECONNECTED              ";    
                           if(MQConstants.MQRC_RECONNECT_QMID_MISMATCH               == opt)buf+=" MQRC_RECONNECT_QMID_MISMATCH  ";    
                           if(MQConstants.MQRC_RECONNECT_INCOMPATIBLE                == opt)buf+=" MQRC_RECONNECT_INCOMPATIBLE   ";    
                           if(MQConstants.MQRC_RECONNECT_FAILED                      == opt)buf+=" MQRC_RECONNECT_FAILED         ";    
                           if(MQConstants.MQRC_CALL_INTERRUPTED                      == opt)buf+=" MQRC_CALL_INTERRUPTED         ";    
                           if(MQConstants.MQRC_NO_SUBS_MATCHED                       == opt)buf+=" MQRC_NO_SUBS_MATCHED          ";    
                           if(MQConstants.MQRC_SELECTION_NOT_AVAILABLE               == opt)buf+=" MQRC_SELECTION_NOT_AVAILABLE  ";    
                           if(MQConstants.MQRC_CHANNEL_SSL_WARNING                   == opt)buf+=" MQRC_CHANNEL_SSL_WARNING      ";    
                           if(MQConstants.MQRC_OCSP_URL_ERROR                        == opt)buf+=" MQRC_OCSP_URL_ERROR           ";    
                           if(MQConstants.MQRC_CONTENT_ERROR                         == opt)buf+=" MQRC_CONTENT_ERROR            ";    
                           if(MQConstants.MQRC_RECONNECT_Q_MGR_REQD                  == opt)buf+=" MQRC_RECONNECT_Q_MGR_REQD     ";    
                           if(MQConstants.MQRC_RECONNECT_TIMED_OUT                   == opt)buf+=" MQRC_RECONNECT_TIMED_OUT      ";    
                           if(MQConstants.MQRC_PUBLISH_EXIT_ERROR                    == opt)buf+=" MQRC_PUBLISH_EXIT_ERROR       ";    
                           if(MQConstants.MQRC_COMMINFO_ERROR                        == opt)buf+=" MQRC_COMMINFO_ERROR           ";    
                           if(MQConstants.MQRC_DEF_SYNCPOINT_INHIBITED               == opt)buf+=" MQRC_DEF_SYNCPOINT_INHIBITED  ";    
                           if(MQConstants.MQRC_MULTICAST_ONLY                        == opt)buf+=" MQRC_MULTICAST_ONLY           ";    
                           if(MQConstants.MQRC_DATA_SET_NOT_AVAILABLE                == opt)buf+=" MQRC_DATA_SET_NOT_AVAILABLE   ";    
                           if(MQConstants.MQRC_GROUPING_NOT_ALLOWED                  == opt)buf+=" MQRC_GROUPING_NOT_ALLOWED     ";    
                           if(MQConstants.MQRC_GROUP_ADDRESS_ERROR                   == opt)buf+=" MQRC_GROUP_ADDRESS_ERROR      ";    
                           if(MQConstants.MQRC_MULTICAST_CONFIG_ERROR                == opt)buf+=" MQRC_MULTICAST_CONFIG_ERROR   ";    
                           if(MQConstants.MQRC_MULTICAST_INTERFACE_ERROR             == opt)buf+=" MQRC_MULTICAST_INTERFACE_ERROR";    
                           if(MQConstants.MQRC_MULTICAST_SEND_ERROR                  == opt)buf+=" MQRC_MULTICAST_SEND_ERROR     ";    
                           if(MQConstants.MQRC_MULTICAST_INTERNAL_ERROR              == opt)buf+=" MQRC_MULTICAST_INTERNAL_ERROR ";    
                           if(MQConstants.MQRC_CONNECTION_NOT_AVAILABLE              == opt)buf+=" MQRC_CONNECTION_NOT_AVAILABLE ";    
                           if(MQConstants.MQRC_SYNCPOINT_NOT_ALLOWED                 == opt)buf+=" MQRC_SYNCPOINT_NOT_ALLOWED    ";    
                           if(MQConstants.MQRC_SSL_ALT_PROVIDER_REQUIRED             == opt)buf+=" MQRC_SSL_ALT_PROVIDER_REQUIRED";    
                           if(MQConstants.MQRC_MCAST_PUB_STATUS                      == opt)buf+=" MQRC_MCAST_PUB_STATUS         ";    
                           if(MQConstants.MQRC_MCAST_SUB_STATUS                      == opt)buf+=" MQRC_MCAST_SUB_STATUS         ";    
                           if(MQConstants.MQRC_PRECONN_EXIT_LOAD_ERROR               == opt)buf+=" MQRC_PRECONN_EXIT_LOAD_ERROR  ";    
                           if(MQConstants.MQRC_PRECONN_EXIT_NOT_FOUND                == opt)buf+=" MQRC_PRECONN_EXIT_NOT_FOUND   ";    
                           if(MQConstants.MQRC_PRECONN_EXIT_ERROR                    == opt)buf+=" MQRC_PRECONN_EXIT_ERROR       ";    
                           if(MQConstants.MQRC_CD_ARRAY_ERROR                        == opt)buf+=" MQRC_CD_ARRAY_ERROR           ";    
                           if(MQConstants.MQRC_CHANNEL_BLOCKED                       == opt)buf+=" MQRC_CHANNEL_BLOCKED          ";    
                           if(MQConstants.MQRC_CHANNEL_BLOCKED_WARNING               == opt)buf+=" MQRC_CHANNEL_BLOCKED_WARNING  ";    
                           if(MQConstants.MQRC_SUBSCRIPTION_CREATE                   == opt)buf+=" MQRC_SUBSCRIPTION_CREATE      ";    
                           if(MQConstants.MQRC_SUBSCRIPTION_DELETE                   == opt)buf+=" MQRC_SUBSCRIPTION_DELETE      ";    
                           if(MQConstants.MQRC_SUBSCRIPTION_CHANGE                   == opt)buf+=" MQRC_SUBSCRIPTION_CHANGE      ";    
                           if(MQConstants.MQRC_SUBSCRIPTION_REFRESH                  == opt)buf+=" MQRC_SUBSCRIPTION_REFRESH     ";    
                           if(MQConstants.MQRC_INSTALLATION_MISMATCH                 == opt)buf+=" MQRC_INSTALLATION_MISMATCH    ";    
                           if(MQConstants.MQRC_NOT_PRIVILEGED                        == opt)buf+=" MQRC_NOT_PRIVILEGED           ";    
                           if(MQConstants.MQRC_PROPERTIES_DISABLED                   == opt)buf+=" MQRC_PROPERTIES_DISABLED      ";    
                           if(MQConstants.MQRC_HMSG_NOT_AVAILABLE                    == opt)buf+=" MQRC_HMSG_NOT_AVAILABLE       ";    
                           if(MQConstants.MQRC_EXIT_PROPS_NOT_SUPPORTED              == opt)buf+=" MQRC_EXIT_PROPS_NOT_SUPPORTED ";    
                           if(MQConstants.MQRC_INSTALLATION_MISSING                  == opt)buf+=" MQRC_INSTALLATION_MISSING     ";    
                           if(MQConstants.MQRC_FASTPATH_NOT_AVAILABLE                == opt)buf+=" MQRC_FASTPATH_NOT_AVAILABLE   ";    
                           if(MQConstants.MQRC_CIPHER_SPEC_NOT_SUITE_B               == opt)buf+=" MQRC_CIPHER_SPEC_NOT_SUITE_B  ";    
                           if(MQConstants.MQRC_SUITE_B_ERROR                         == opt)buf+=" MQRC_SUITE_B_ERROR            ";    
                           if(MQConstants.MQRC_CERT_VAL_POLICY_ERROR                 == opt)buf+=" MQRC_CERT_VAL_POLICY_ERROR    ";    
                           if(MQConstants.MQRC_REOPEN_EXCL_INPUT_ERROR               == opt)buf+=" MQRC_REOPEN_EXCL_INPUT_ERROR  ";    
                           if(MQConstants.MQRC_REOPEN_INQUIRE_ERROR                  == opt)buf+=" MQRC_REOPEN_INQUIRE_ERROR     ";    
                           if(MQConstants.MQRC_REOPEN_SAVED_CONTEXT_ERR              == opt)buf+=" MQRC_REOPEN_SAVED_CONTEXT_ERR ";    
                           if(MQConstants.MQRC_REOPEN_TEMPORARY_Q_ERROR              == opt)buf+=" MQRC_REOPEN_TEMPORARY_Q_ERROR ";    
                           if(MQConstants.MQRC_ATTRIBUTE_LOCKED                      == opt)buf+=" MQRC_ATTRIBUTE_LOCKED         ";    
                           if(MQConstants.MQRC_CURSOR_NOT_VALID                      == opt)buf+=" MQRC_CURSOR_NOT_VALID         ";    
                           if(MQConstants.MQRC_ENCODING_ERROR                        == opt)buf+=" MQRC_ENCODING_ERROR           ";    
                           if(MQConstants.MQRC_STRUC_ID_ERROR                        == opt)buf+=" MQRC_STRUC_ID_ERROR           ";    
                           if(MQConstants.MQRC_NULL_POINTER                          == opt)buf+=" MQRC_NULL_POINTER             ";    
                           if(MQConstants.MQRC_NO_CONNECTION_REFERENCE               == opt)buf+=" MQRC_NO_CONNECTION_REFERENCE  ";    
                           if(MQConstants.MQRC_NO_BUFFER                             == opt)buf+=" MQRC_NO_BUFFER                ";    
                           if(MQConstants.MQRC_BINARY_DATA_LENGTH_ERROR              == opt)buf+=" MQRC_BINARY_DATA_LENGTH_ERROR ";    
                           if(MQConstants.MQRC_BUFFER_NOT_AUTOMATIC                  == opt)buf+=" MQRC_BUFFER_NOT_AUTOMATIC     ";    
                           if(MQConstants.MQRC_INSUFFICIENT_BUFFER                   == opt)buf+=" MQRC_INSUFFICIENT_BUFFER      ";    
                           if(MQConstants.MQRC_INSUFFICIENT_DATA                     == opt)buf+=" MQRC_INSUFFICIENT_DATA        ";    
                           if(MQConstants.MQRC_DATA_TRUNCATED                        == opt)buf+=" MQRC_DATA_TRUNCATED           ";    
                           if(MQConstants.MQRC_ZERO_LENGTH                           == opt)buf+=" MQRC_ZERO_LENGTH              ";    
                           if(MQConstants.MQRC_NEGATIVE_LENGTH                       == opt)buf+=" MQRC_NEGATIVE_LENGTH          ";    
                           if(MQConstants.MQRC_NEGATIVE_OFFSET                       == opt)buf+=" MQRC_NEGATIVE_OFFSET          ";    
                           if(MQConstants.MQRC_INCONSISTENT_FORMAT                   == opt)buf+=" MQRC_INCONSISTENT_FORMAT      ";    
                           if(MQConstants.MQRC_INCONSISTENT_OBJECT_STATE             == opt)buf+=" MQRC_INCONSISTENT_OBJECT_STATE";    
                           if(MQConstants.MQRC_CONTEXT_OBJECT_NOT_VALID              == opt)buf+=" MQRC_CONTEXT_OBJECT_NOT_VALID ";    
                           if(MQConstants.MQRC_CONTEXT_OPEN_ERROR                    == opt)buf+=" MQRC_CONTEXT_OPEN_ERROR       ";    
                           if(MQConstants.MQRC_STRUC_LENGTH_ERROR                    == opt)buf+=" MQRC_STRUC_LENGTH_ERROR       ";    
                           if(MQConstants.MQRC_NOT_CONNECTED                         == opt)buf+=" MQRC_NOT_CONNECTED            ";    
                           if(MQConstants.MQRC_NOT_OPEN                              == opt)buf+=" MQRC_NOT_OPEN                 ";    
                           if(MQConstants.MQRC_DISTRIBUTION_LIST_EMPTY               == opt)buf+=" MQRC_DISTRIBUTION_LIST_EMPTY  ";    
                           if(MQConstants.MQRC_INCONSISTENT_OPEN_OPTIONS             == opt)buf+=" MQRC_INCONSISTENT_OPEN_OPTIONS";    
                           if(MQConstants.MQRC_WRONG_VERSION                         == opt)buf+=" MQRC_WRONG_VERSION            ";    
                           if(MQConstants.MQRC_REFERENCE_ERROR                       == opt)buf+=" MQRC_REFERENCE_ERROR          ";    
                           if(MQConstants.MQRC_XR_NOT_AVAILABLE                      == opt)buf+=" MQRC_XR_NOT_AVAILABLE         ";    
                     return buf;
             }                                                                         


}